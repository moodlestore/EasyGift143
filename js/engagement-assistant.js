// Ïù∏Í≤åÏù¥ÏßÄÎ®ºÌä∏ Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏ Î™®Îìà - UI ÏàòÏ†ï ÏôÑÎ£å
window.EngagementAssistant = {
    // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Í≥ÑÏ†ï Î≥ÄÏàò
    currentSelectedAccount: null,

    // HTML Î∞òÌôò - ÏôÑÏ†ÑÌûà ÏÉàÎ°ú ÏûëÏÑ±
    getHTML: function() {
        const mode = AppState.currentMode;
        
        return `
            <div class="section">
                <h2>üìà SNS ÏÑ±Ïû• ÎèÑÏö∞ÎØ∏ (${mode.toUpperCase()} Î™®Îìú)</h2>

                ${mode === 'pro' ? `
                    <div style="background: #e8f5e8; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                        <h3>üíé Pro Î™®Îìú Í∏∞Îä•</h3>
                        <ul>
                            <li>‚úÖ AI Í∏∞Î∞ò ÎßûÏ∂§ Î™©Ìëú ÏÑ§Ï†ï</li>
                            <li>‚úÖ Buffer Analytics Ïó∞Îèô</li>
                            <li>‚úÖ ManyChat Analytics Ïó∞Îèô</li>
                            <li>‚úÖ Ïã§ÏãúÍ∞Ñ ÏÑ±Í≥º Î∂ÑÏÑù</li>
                        </ul>
                    </div>
                ` : ''}

                <!-- ÏùºÏùº Î™©Ìëú ÏÑπÏÖò -->
                <div style="margin-bottom: 20px;">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                        <h2 style="margin: 0;">üéØ Ïò§ÎäòÏùò Î™©Ìëú</h2>
                    </div>
                    
                    <!-- Î©îÏù∏ Î†àÏù¥ÏïÑÏõÉ: ÏôºÏ™Ω Î™©Ìëú ÌòÑÌô© + Ïò§Î•∏Ï™Ω Í≥ÑÏ†ï Í¥ÄÎ¶¨ -->
                    <div style="display: grid; grid-template-columns: 2fr 1fr; gap: 20px; min-height: 300px;">
                        
                        <!-- ÏôºÏ™Ω: ÏÑ†ÌÉùÎêú Í≥ÑÏ†ï Î™©Ìëú ÌòÑÌô© -->
                        <div style="background: white; padding: 25px; border-radius: 10px; border: 2px solid #667eea; position: relative;">
                            <!-- ÏÉÅÎã® Ï†ïÎ≥¥ -->
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                                <div style="color: #666; font-size: 20px; font-weight: bold;">2024.06.03</div>
                                <div style="font-size: 1.2em; color: #667eea;">
                                    <strong>Ï¥ù ÏßÑÌñâÎ•†:</strong> <span id="overallProgress" style="font-size: 1.3em; color: #333;">0%</span>
                                </div>
                            </div>
                            
                            <!-- Í≥ÑÏ†ïÎ™Ö -->
                            <div style="text-align: center; margin-bottom: 30px;">
                                <h3 style="margin: 0; font-size: 1.8em; color: #333;">
                                    <span id="selectedAccountName">Í≥ÑÏ†ïÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</span>
                                </h3>
                            </div>
                            
                            <!-- Î™©Ìëú Î¶¨Ïä§Ìä∏ÏôÄ ÏßÑÌñâÎ•† Î∞î -->
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 30px;">
                                <!-- ÏôºÏ™Ω: Î™©Ìëú Î¶¨Ïä§Ìä∏ -->
                                <div style="flex: 1;">
                                    <!-- Ìè¨Ïä§ÌåÖ -->
                                    <div style="display: flex; align-items: center; margin-bottom: 20px;">
                                        <div style="width: 80px; font-size: 1.2em; color: #666; font-weight: bold;">Ìè¨Ïä§ÌåÖ</div>
                                        <div style="display: flex; align-items: center; gap: 10px;">
                                            <button onclick="EngagementAssistant.updateCurrentGoal('posts', -1)" 
                                                    style="width: 35px; height: 35px; font-size: 16px; border-radius: 50%; background: #667eea; color: white; border: none; cursor: pointer; display: flex; align-items: center; justify-content: center; line-height: 1;">-</button>
                                            <span style="display: flex; align-items: center; min-width: 80px; justify-content: center;">
                                                <span id="current-posts" style="font-size: 1.6em; font-weight: bold; color: #333;">0</span>
                                                <span style="color: #666; font-size: 1.2em; margin: 0 8px;"> / </span>
                                                <span id="current-posts-target" style="font-size: 1.2em; color: #666;">0</span>
                                            </span>
                                            <button onclick="EngagementAssistant.updateCurrentGoal('posts', 1)" 
                                                    style="width: 35px; height: 35px; font-size: 16px; border-radius: 50%; background: #667eea; color: white; border: none; cursor: pointer; display: flex; align-items: center; justify-content: center; line-height: 1;">+</button>
                                        </div>
                                    </div>
                                    
                                    <!-- Ï¢ãÏïÑÏöî -->
                                    <div style="display: flex; align-items: center; margin-bottom: 20px;">
                                        <div style="width: 80px; font-size: 1.2em; color: #666; font-weight: bold;">Ï¢ãÏïÑÏöî</div>
                                        <div style="display: flex; align-items: center; gap: 10px;">
                                            <button onclick="EngagementAssistant.updateCurrentGoal('likes', -1)" 
                                                    style="width: 35px; height: 35px; font-size: 16px; border-radius: 50%; background: #667eea; color: white; border: none; cursor: pointer; display: flex; align-items: center; justify-content: center; line-height: 1;">-</button>
                                            <span style="display: flex; align-items: center; min-width: 80px; justify-content: center;">
                                                <span id="current-likes" style="font-size: 1.6em; font-weight: bold; color: #333;">0</span>
                                                <span style="color: #666; font-size: 1.2em; margin: 0 8px;"> / </span>
                                                <span id="current-likes-target" style="font-size: 1.2em; color: #666;">0</span>
                                            </span>
                                            <button onclick="EngagementAssistant.updateCurrentGoal('likes', 1)" 
                                                    style="width: 35px; height: 35px; font-size: 16px; border-radius: 50%; background: #667eea; color: white; border: none; cursor: pointer; display: flex; align-items: center; justify-content: center; line-height: 1;">+</button>
                                        </div>
                                    </div>
                                    
                                    <!-- ÎåìÍ∏Ä -->
                                    <div style="display: flex; align-items: center; margin-bottom: 20px;">
                                        <div style="width: 80px; font-size: 1.2em; color: #666; font-weight: bold;">ÎåìÍ∏Ä</div>
                                        <div style="display: flex; align-items: center; gap: 10px;">
                                            <button onclick="EngagementAssistant.updateCurrentGoal('comments', -1)" 
                                                    style="width: 35px; height: 35px; font-size: 16px; border-radius: 50%; background: #667eea; color: white; border: none; cursor: pointer; display: flex; align-items: center; justify-content: center; line-height: 1;">-</button>
                                            <span style="display: flex; align-items: center; min-width: 80px; justify-content: center;">
                                                <span id="current-comments" style="font-size: 1.6em; font-weight: bold; color: #333;">0</span>
                                                <span style="color: #666; font-size: 1.2em; margin: 0 8px;"> / </span>
                                                <span id="current-comments-target" style="font-size: 1.2em; color: #666;">0</span>
                                            </span>
                                            <button onclick="EngagementAssistant.updateCurrentGoal('comments', 1)" 
                                                    style="width: 35px; height: 35px; font-size: 16px; border-radius: 50%; background: #667eea; color: white; border: none; cursor: pointer; display: flex; align-items: center; justify-content: center; line-height: 1;">+</button>
                                        </div>
                                    </div>
                                    
                                    <!-- ÌåîÎ°úÏö∞ -->
                                    <div style="display: flex; align-items: center; margin-bottom: 20px;">
                                        <div style="width: 80px; font-size: 1.2em; color: #666; font-weight: bold;">ÌåîÎ°úÏö∞</div>
                                        <div style="display: flex; align-items: center; gap: 10px;">
                                            <button onclick="EngagementAssistant.updateCurrentGoal('follows', -1)" 
                                                    style="width: 35px; height: 35px; font-size: 16px; border-radius: 50%; background: #667eea; color: white; border: none; cursor: pointer; display: flex; align-items: center; justify-content: center; line-height: 1;">-</button>
                                            <span style="display: flex; align-items: center; min-width: 80px; justify-content: center;">
                                                <span id="current-follows" style="font-size: 1.6em; font-weight: bold; color: #333;">0</span>
                                                <span style="color: #666; font-size: 1.2em; margin: 0 8px;"> / </span>
                                                <span id="current-follows-target" style="font-size: 1.2em; color: #666;">0</span>
                                            </span>
                                            <button onclick="EngagementAssistant.updateCurrentGoal('follows', 1)" 
                                                    style="width: 35px; height: 35px; font-size: 16px; border-radius: 50%; background: #667eea; color: white; border: none; cursor: pointer; display: flex; align-items: center; justify-content: center; line-height: 1;">+</button>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Ïò§Î•∏Ï™Ω: ÏßÑÌñâÎ•† Î∞îÏôÄ Ï∫êÎ¶≠ÌÑ∞ -->
                                <div style="display: flex; align-items: center; gap: 20px; margin-left: 40px;">
                                    <div style="width: 40px; height: 250px; background: #e9ecef; border-radius: 20px; position: relative; border: 3px solid #dee2e6;">
                                        <div id="verticalProgress" style="position: absolute; bottom: 0; width: 100%; background: linear-gradient(0deg, #667eea, #764ba2); border-radius: 17px; transition: height 0.3s ease; height: 0%;"></div>
                                    </div>
                                    <div id="progressCharacter" style="font-size: 4em;">üò¥</div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Ïò§Î•∏Ï™Ω: Í≥ÑÏ†ï Í¥ÄÎ¶¨ -->
                        <div style="background: white; padding: 25px; border-radius: 10px; border: 2px solid #28a745;">
                            <h3 style="margin: 0 0 20px 0; text-align: center; font-size: 1.4em;">‚öôÔ∏è Í≥ÑÏ†ï Í¥ÄÎ¶¨</h3>
                            
                            <!-- SNS ÏÑ†ÌÉù -->
                            <div style="margin-bottom: 15px;">
                                <label for="snsSelect" style="display: block; font-size: 14px; margin-bottom: 8px; font-weight: bold;">SNS ÌîåÎû´Ìèº:</label>
                                <select id="snsSelect" style="width: 100%; padding: 10px; font-size: 14px; border: 2px solid #e1e5e9; border-radius: 8px;">
                                    <option value="instagram">Instagram</option>
                                    <option value="x">X (Twitter)</option>
                                    <option value="threads">Threads</option>
                                </select>
                            </div>
                            
                            <!-- Íµ≠Í∞Ä ÏÑ†ÌÉù -->
                            <div style="margin-bottom: 20px;">
                                <label for="languageSelect" style="display: block; font-size: 14px; margin-bottom: 8px; font-weight: bold;">Íµ≠Í∞Ä:</label>
                                <select id="languageSelect" style="width: 100%; padding: 10px; font-size: 14px; border: 2px solid #e1e5e9; border-radius: 8px;">
                                    <option value="korea">ÌïúÍµ≠</option>
                                    <option value="japan">ÏùºÎ≥∏</option>
                                    <option value="usa">ÎØ∏Íµ≠</option>
                                    <option value="canada">Ï∫êÎÇòÎã§</option>
                                </select>
                            </div>
                            
                            <!-- Ï∂îÍ∞Ä/Ï†úÍ±∞ Î≤ÑÌäº -->
                            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 20px;">
                                <button onclick="EngagementAssistant.addAccount()" 
                                        style="background: #28a745; color: white; border: none; padding: 12px; border-radius: 8px; font-size: 14px; font-weight: bold; cursor: pointer;">‚ûï Ï∂îÍ∞Ä</button>
                                <button onclick="EngagementAssistant.removeAccount()" 
                                        style="background: #dc3545; color: white; border: none; padding: 12px; border-radius: 8px; font-size: 14px; font-weight: bold; cursor: pointer;">‚ûñ Ï†úÍ±∞</button>
                            </div>
                            
                            <!-- Í≥ÑÏ†ï Î™©Î°ù -->
                            <div style="margin-bottom: 15px;">
                                <label style="display: block; font-size: 14px; margin-bottom: 8px; font-weight: bold;">ÌôúÏÑ± Í≥ÑÏ†ï Î™©Î°ù:</label>
                                <select id="accountList" size="4" onchange="EngagementAssistant.selectAccount()" 
                                        style="width: 100%; padding: 8px; font-size: 13px; border: 2px solid #e1e5e9; border-radius: 8px; background: white;">
                                    <!-- ÎèôÏ†ÅÏúºÎ°ú Ï±ÑÏõåÏßê -->
                                </select>
                            </div>
                            
                            <div style="text-align: center;">
                                <button onclick="EngagementAssistant.saveAccountList()" 
                                        style="background: #667eea; color: white; border: none; padding: 10px 16px; border-radius: 8px; font-size: 13px; font-weight: bold; cursor: pointer;">üíæ Î™©Î°ù Ï†ÄÏû•</button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Î≤àÏó≠ Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏ ÏÑπÏÖò -->
                <div style="background: white; padding: 25px; border-radius: 10px; border: 2px solid #e1e5e9; margin-top: 30px;">
                    <h2 style="margin: 0 0 20px 0; color: #667eea;">üî§ Î≤àÏó≠ Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏</h2>
                    
                    <div style="margin-bottom: 20px;">
                        <label for="commentInput" style="display: block; font-size: 16px; margin-bottom: 10px; font-weight: bold;">ÌïúÍµ≠Ïñ¥ ÎåìÍ∏Ä ÏûÖÎ†•:</label>
                        <textarea id="commentInput" rows="3" placeholder="Î≤àÏó≠Ìï† Î¨∏Ïû•ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî" 
                                  style="width: 100%; padding: 12px; border: 2px solid #e1e5e9; border-radius: 8px; font-size: 14px; resize: vertical;"></textarea>
                    </div>
                    
                    <div style="display: flex; gap: 20px; align-items: end; margin-bottom: 20px;">
                        <div style="flex: 1;">
                            <label for="toneSelector" style="display: block; font-size: 16px; margin-bottom: 10px; font-weight: bold;">ÌÜ§Ïï§Îß§ÎÑà:</label>
                            <select id="toneSelector" style="width: 100%; padding: 12px; border: 2px solid #e1e5e9; border-radius: 8px; font-size: 14px;">
                                <option value="friendly">ÏπúÍ∑ºÌïú</option>
                                <option value="polite">Ï†ïÏ§ëÌïú</option>
                                <option value="casual">Ï∫êÏ£ºÏñº</option>
                            </select>
                        </div>
                        <button onclick="EngagementAssistant.translateComment()" 
                                style="background: linear-gradient(45deg, #667eea, #764ba2); color: white; border: none; padding: 12px 24px; border-radius: 8px; font-size: 16px; font-weight: bold; cursor: pointer; height: fit-content;">Î≤àÏó≠ÌïòÍ∏∞</button>
                    </div>
                    
                    <div id="translationResult" style="margin-top: 20px;"></div>
                </div>
            </div>
        `;
    },

    // Ï¥àÍ∏∞Ìôî
    initialize: function() {
        this.checkMidnightReset();
        this.restoreGoalsState();
        this.initializeAccountList();
        AppState.templates = this.templates;
    },

    // ÌòÑÏû¨ Í≥ÑÏ†ï Î™©Ìëú ÏóÖÎç∞Ïù¥Ìä∏ - ÏàòÏ†ïÎêú Î≤ÑÏ†Ñ
    updateCurrentGoal: function(type, change) {
        if (!this.currentSelectedAccount) {
            Utils.showAchievement('Í≥ÑÏ†ïÏùÑ Î®ºÏ†Ä ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.', 'error');
            return;
        }
        
        const accountGoals = this.getAccountGoals(this.currentSelectedAccount);
        const current = accountGoals[type];
        const target = accountGoals.targets[type];
        const newValue = Math.max(0, Math.min(target, current + change));
        
        // Í∞í ÏóÖÎç∞Ïù¥Ìä∏
        accountGoals[type] = newValue;
        
        // UI ÏóÖÎç∞Ïù¥Ìä∏
        const currentElement = document.getElementById(`current-${type}`);
        if (currentElement) {
            currentElement.textContent = newValue;
        }
        
        // ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏
        this.updateCurrentProgress();
        
        // Î™©Ìëú Îã¨ÏÑ± Ï≤¥ÌÅ¨
        if (newValue === target) {
            Utils.showAchievement(`${this.currentSelectedAccount} ${type} Î™©Ìëú Îã¨ÏÑ±! üéâ`);
        }
        
        AppState.saveAppState();
    },

    // ÌòÑÏû¨ Í≥ÑÏ†ï ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏ - ÏàòÏ†ïÎêú Î≤ÑÏ†Ñ
    updateCurrentProgress: function() {
        if (!this.currentSelectedAccount) {
            this.updateProgressCharacter(0);
            const overallElement = document.getElementById('overallProgress');
            if (overallElement) {
                overallElement.textContent = '0%';
            }
            return;
        }
        
        const accountGoals = this.getAccountGoals(this.currentSelectedAccount);
        const totalCurrent = accountGoals.posts + accountGoals.likes + accountGoals.comments + accountGoals.follows;
        const totalTarget = accountGoals.targets.posts + accountGoals.targets.likes + accountGoals.targets.comments + accountGoals.targets.follows;
        const percentage = totalTarget > 0 ? (totalCurrent / totalTarget) * 100 : 0;
        
        // ÏßÑÌñâÎ•† Ï∫êÎ¶≠ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
        this.updateProgressCharacter(percentage);
        
        // Ï¥ù ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏
        const overallElement = document.getElementById('overallProgress');
        if (overallElement) {
            overallElement.textContent = `${Math.round(percentage)}%`;
        }
    },

    // ÏßÑÌñâÎ•† Ï∫êÎ¶≠ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ - ÏàòÏ†ïÎêú Î≤ÑÏ†Ñ
    updateProgressCharacter: function(percentage) {
        const characterElement = document.getElementById('progressCharacter');
        const verticalProgress = document.getElementById('verticalProgress');
        
        if (!characterElement || !verticalProgress) {
            console.log('UI ÏöîÏÜåÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§:', { 
                characterElement: !!characterElement, 
                verticalProgress: !!verticalProgress 
            });
            return;
        }
        
        // ÏÑ∏Î°ú ÏßÑÌñâÎ•† Î∞î ÏóÖÎç∞Ïù¥Ìä∏
        verticalProgress.style.height = `${Math.round(percentage)}%`;
        
        // ÏßÑÌñâÎ•†Ïóê Îî∞Î•∏ Ï∫êÎ¶≠ÌÑ∞ÏôÄ ÏÉâÏÉÅ Î≥ÄÍ≤Ω
        let character = 'üò¥';
        let bgColor = 'linear-gradient(0deg, #6c757d, #495057)';
        
        if (percentage >= 100) {
            character = 'üéâ';
            bgColor = 'linear-gradient(0deg, #28a745, #20c997)';
        } else if (percentage >= 75) {
            character = 'ü§©';
            bgColor = 'linear-gradient(0deg, #28a745, #20c997)';
        } else if (percentage >= 50) {
            character = 'üòä';
            bgColor = 'linear-gradient(0deg, #ffc107, #fd7e14)';
        } else if (percentage >= 25) {
            character = 'üôÇ';
            bgColor = 'linear-gradient(0deg, #667eea, #764ba2)';
        } else if (percentage > 0) {
            character = 'üòê';
            bgColor = 'linear-gradient(0deg, #6c757d, #495057)';
        }
        
        characterElement.textContent = character;
        verticalProgress.style.background = bgColor;
        
        console.log(`ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏: ${percentage}%, Ï∫êÎ¶≠ÌÑ∞: ${character}`);
    },

    // Í≥ÑÏ†ï ÏÑ†ÌÉù
    selectAccount: function() {
        const accountList = document.getElementById('accountList');
        const selectedOption = accountList.options[accountList.selectedIndex];
        
        if (selectedOption) {
            this.currentSelectedAccount = selectedOption.value;
            this.updateCurrentAccountDisplay();
            this.updateCurrentProgress();
        }
    },

    // ÌòÑÏû¨ Í≥ÑÏ†ï ÌëúÏãú ÏóÖÎç∞Ïù¥Ìä∏
    updateCurrentAccountDisplay: function() {
        if (!this.currentSelectedAccount) {
            document.getElementById('selectedAccountName').textContent = 'Í≥ÑÏ†ïÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî';
            return;
        }
        
        const [sns, language] = this.currentSelectedAccount.split('-');
        const displayName = this.getAccountDisplayName(sns, language);
        document.getElementById('selectedAccountName').textContent = displayName;
        
        // Ìï¥Îãπ Í≥ÑÏ†ïÏùò Î™©Ìëú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        const accountGoals = this.getAccountGoals(this.currentSelectedAccount);
        
        // UI ÏóÖÎç∞Ïù¥Ìä∏
        document.getElementById('current-posts').textContent = accountGoals.posts;
        document.getElementById('current-posts-target').textContent = accountGoals.targets.posts;
        document.getElementById('current-likes').textContent = accountGoals.likes;
        document.getElementById('current-likes-target').textContent = accountGoals.targets.likes;
        document.getElementById('current-comments').textContent = accountGoals.comments;
        document.getElementById('current-comments-target').textContent = accountGoals.targets.comments;
        document.getElementById('current-follows').textContent = accountGoals.follows;
        document.getElementById('current-follows-target').textContent = accountGoals.targets.follows;
        
        this.updateCurrentProgress();
    },

    // ÎÇòÎ®∏ÏßÄ Ìï®ÏàòÎì§ÏùÄ Í∏∞Ï°¥Í≥º ÎèôÏùºÌïòÎØÄÎ°ú ÏÉùÎûµ...
    // (Í≥ÑÏ†ï Í¥ÄÎ¶¨, Î≤àÏó≠, Ï¥àÍ∏∞Ìôî Îì±Ïùò Ìï®ÏàòÎì§ÏùÄ Í∏∞Ï°¥ ÏΩîÎìú Ïú†ÏßÄ)

    // Í≥ÑÏ†ïÎ≥Ñ Î™©Ìëú Í∞ÄÏ†∏Ïò§Í∏∞
    getAccountGoals: function(accountKey) {
        if (!AppState.accountGoals) {
            AppState.accountGoals = {};
        }
        
        if (!AppState.accountGoals[accountKey]) {
            const [sns, language] = accountKey.split('-');
            AppState.accountGoals[accountKey] = {
                posts: 0, likes: 0, comments: 0, follows: 0,
                targets: this.getDefaultTargets(sns, language)
            };
        }
        
        return AppState.accountGoals[accountKey];
    },

    // Í∏∞Î≥∏ Î™©Ìëú ÏÑ§Ï†ï
    getDefaultTargets: function(sns, language) {
        const baseTargets = {
            instagram: { posts: 1, likes: 5, comments: 2, follows: 1 },
            x: { posts: 2, likes: 3, comments: 1, follows: 1 },
            threads: { posts: 1, likes: 4, comments: 1, follows: 1 }
        };
        
        return baseTargets[sns] || { posts: 1, likes: 3, comments: 1, follows: 1 };
    },

    // Í≥ÑÏ†ï Î™©Î°ù Ï¥àÍ∏∞Ìôî
    initializeAccountList: function() {
        if (!AppState.accountList) {
            AppState.accountList = [
                'instagram-korea', 'instagram-japan', 'instagram-usa',
                'x-korea', 'x-japan', 'x-usa',
                'threads-korea', 'threads-japan', 'threads-usa'
            ];
        }
        this.updateAccountListDisplay();
    },

    // Í≥ÑÏ†ï Ï∂îÍ∞Ä
    addAccount: function() {
        const sns = document.getElementById('snsSelect').value;
        const language = document.getElementById('languageSelect').value;
        const accountKey = `${sns}-${language}`;
        
        if (!AppState.accountList.includes(accountKey)) {
            AppState.accountList.push(accountKey);
            this.updateAccountListDisplay();
            AppState.saveAppState();
            Utils.showAchievement(`${this.getAccountDisplayName(sns, language)} Í≥ÑÏ†ïÏù¥ Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§!`);
        } else {
            Utils.showAchievement('Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî Í≥ÑÏ†ïÏûÖÎãàÎã§.', 'error');
        }
    },

    // Í≥ÑÏ†ï Ï†úÍ±∞
    removeAccount: function() {
        const accountList = document.getElementById('accountList');
        const selectedOption = accountList.options[accountList.selectedIndex];
        
        if (selectedOption) {
            const accountKey = selectedOption.value;
            const index = AppState.accountList.indexOf(accountKey);
            
            if (index > -1) {
                AppState.accountList.splice(index, 1);
                this.updateAccountListDisplay();
                AppState.saveAppState();
                Utils.showAchievement(`${selectedOption.text} Í≥ÑÏ†ïÏù¥ Ï†úÍ±∞ÎêòÏóàÏäµÎãàÎã§!`);
            }
        } else {
            Utils.showAchievement('Ï†úÍ±∞Ìï† Í≥ÑÏ†ïÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.', 'error');
        }
    },

    // Í≥ÑÏ†ï Î™©Î°ù ÌëúÏãú ÏóÖÎç∞Ïù¥Ìä∏
    updateAccountListDisplay: function() {
        const accountList = document.getElementById('accountList');
        if (!accountList) return;
        
        accountList.innerHTML = '';
        
        AppState.accountList.forEach(accountKey => {
            const [sns, language] = accountKey.split('-');
            const option = document.createElement('option');
            option.value = accountKey;
            option.textContent = this.getAccountDisplayName(sns, language);
            accountList.appendChild(option);
        });
    },

    // Í≥ÑÏ†ï ÌëúÏãúÎ™Ö ÏÉùÏÑ±
    getAccountDisplayName: function(sns, language) {
        const snsNames = {
            instagram: 'Instagram',
            x: 'X',
            threads: 'Threads'
        };
        
        const languageNames = {
            korea: 'ÌïúÍµ≠',
            japan: 'ÏùºÎ≥∏',
            usa: 'ÎØ∏Íµ≠',
            canada: 'Ï∫êÎÇòÎã§'
        };
        
        return `${snsNames[sns]} / ${languageNames[language]}`;
    },

    // Í≥ÑÏ†ï Î™©Î°ù Ï†ÄÏû•
    saveAccountList: function() {
        AppState.saveAppState();
        Utils.showAchievement('Í≥ÑÏ†ï Î™©Î°ùÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§! üíæ');
    },

    // ÏûêÏ†ï Î¶¨ÏÖã Ï≤¥ÌÅ¨
    checkMidnightReset: function() {
        const lastResetDate = Utils.safeStorage.get('lastResetDate', '');
        const today = new Date().toDateString();
        
        if (lastResetDate !== today) {
            this.resetAllGoals();
            Utils.safeStorage.set('lastResetDate', today);
            Utils.showAchievement('ÏûêÏ†ïÏù¥ ÏßÄÎÇò Î™©ÌëúÍ∞Ä ÏûêÎèôÏúºÎ°ú Î¶¨ÏÖãÎêòÏóàÏäµÎãàÎã§! üåÖ');
        }
    },

    // Î™®Îì† Î™©Ìëú Î¶¨ÏÖã
    resetAllGoals: function() {
        if (AppState.accountGoals) {
            Object.keys(AppState.accountGoals).forEach(accountKey => {
                AppState.accountGoals[accountKey].posts = 0;
                AppState.accountGoals[accountKey].likes = 0;
                AppState.accountGoals[accountKey].comments = 0;
                AppState.accountGoals[accountKey].follows = 0;
            });
        }
        
        // UI ÏóÖÎç∞Ïù¥Ìä∏
        if (this.currentSelectedAccount) {
            this.updateCurrentAccountDisplay();
        }
        
        AppState.saveAppState();
    },

    // Î™©Ìëú ÏÉÅÌÉú Î≥µÏõê
    restoreGoalsState: function() {
        setTimeout(() => {
            if (this.currentSelectedAccount) {
                this.updateCurrentAccountDisplay();
            }
        }, 100);
    },

    // Î≤àÏó≠ Ìï®Ïàò
    translateComment: function() {
        const input = document.getElementById('commentInput').value.trim();
        const tone = document.getElementById('toneSelector').value;
        const result = document.getElementById('translationResult');
        
        if (!input) {
            result.innerHTML = '<p style="color: #dc3545; padding: 15px; background: #f8d7da; border-radius: 8px;">Î≤àÏó≠Ìï† ÌÖçÏä§Ìä∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.</p>';
            return;
        }
        
        // Î°úÎî© ÌëúÏãú
        result.innerHTML = '<p style="padding: 15px; background: #d1ecf1; border-radius: 8px; text-align: center;">Î≤àÏó≠ Ï§ë... ‚è≥</p>';
        
        // GPT API Ìò∏Ï∂ú (Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî Ïó¨Í∏∞ÏÑú API Ìò∏Ï∂ú)
        if (AppState.currentMode === 'pro') {
            this.callGPTTranslation(input, tone, result);
        } else {
            // Free Î™®ÎìúÏóêÏÑúÎäî ÏãúÎÆ¨Î†àÏù¥ÏÖò
            setTimeout(() => {
                const translations = this.getSimulatedTranslation(input, tone);
                this.displayTranslationResult(input, translations, tone, result);
            }, 1000);
        }
    },

    // GPT API Ìò∏Ï∂ú (Pro Î™®Îìú)
    callGPTTranslation: function(input, tone, resultElement) {
        // Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî Ïó¨Í∏∞ÏÑú GPT API Ìò∏Ï∂ú
        // ÌòÑÏû¨Îäî ÏãúÎÆ¨Î†àÏù¥ÏÖòÏúºÎ°ú Íµ¨ÌòÑ
        setTimeout(() => {
            const translations = this.getSimulatedTranslation(input, tone);
            this.displayTranslationResult(input, translations, tone, resultElement);
        }, 1500);
    },

    // Î≤àÏó≠ Í≤∞Í≥º ÌëúÏãú
    displayTranslationResult: function(original, translations, tone, resultElement) {
        resultElement.innerHTML = `
            <div style="background: white; padding: 25px; border-radius: 10px; border: 2px solid #e1e5e9;">
                <h4 style="margin: 0 0 20px 0; color: #667eea; font-size: 1.3em;">Î≤àÏó≠ Í≤∞Í≥º (${this.getToneName(tone)} ÌÜ§):</h4>
                
                <div style="margin-bottom: 15px; padding: 15px; background: #f8f9fa; border-radius: 8px; border-left: 4px solid #667eea;">
                    <strong style="font-size: 1.1em;">üá∞üá∑ ÌïúÍµ≠Ïñ¥:</strong><br>
                    <span style="font-size: 1.1em; margin-top: 5px; display: block;">${original}</span>
                </div>
                
                <div style="margin-bottom: 15px; padding: 15px; background: #fff3cd; border-radius: 8px; border-left: 4px solid #ffc107; display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <strong style="font-size: 1.1em;">üáØüáµ ÏùºÎ≥∏Ïñ¥:</strong><br>
                        <span style="font-size: 1.1em; margin-top: 5px; display: block;">${translations.japanese}</span>
                    </div>
                    <button onclick="Utils.copyText('${translations.japanese}')" 
                            style="background: #28a745; color: white; border: none; padding: 8px 12px; border-radius: 6px; font-size: 12px; cursor: pointer; white-space: nowrap; margin-left: 15px;">Î≥µÏÇ¨</button>
                </div>
                
                <div style="margin-bottom: 20px; padding: 15px; background: #d1ecf1; border-radius: 8px; border-left: 4px solid #17a2b8; display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <strong style="font-size: 1.1em;">üá´üá∑ ÌîÑÎûëÏä§Ïñ¥:</strong><br>
                        <span style="font-size: 1.1em; margin-top: 5px; display: block;">${translations.french}</span>
                    </div>
                    <button onclick="Utils.copyText('${translations.french}')" 
                            style="background: #28a745; color: white; border: none; padding: 8px 12px; border-radius: 6px; font-size: 12px; cursor: pointer; white-space: nowrap; margin-left: 15px;">Î≥µÏÇ¨</button>
                </div>
                
                <div style="padding: 15px; background: #e2e3e5; border-radius: 8px; font-size: 14px; line-height: 1.5;">
                    <strong>üí° ÏÇ¨Ïö© ÌåÅ:</strong> Í∞Å Ïñ∏Ïñ¥Ïùò Î¨∏ÌôîÏ†Å ÌäπÏÑ±ÏùÑ Í≥†Î†§ÌïòÏó¨ Î≤àÏó≠ÌñàÏäµÎãàÎã§. Î≥µÏÇ¨ Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ Î∞îÎ°ú ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî!
                </div>
            </div>
        `;
    },

    // ÌÜ§ Ïù¥Î¶Ñ Î≥ÄÌôò
    getToneName: function(tone) {
        const names = {
            friendly: 'ÏπúÍ∑ºÌïú',
            polite: 'Ï†ïÏ§ëÌïú',
            casual: 'Ï∫êÏ£ºÏñº'
        };
        return names[tone] || tone;
    },

    // ÏãúÎÆ¨Î†àÏù¥ÏÖòÎêú Î≤àÏó≠ Í≤∞Í≥º
    getSimulatedTranslation: function(text, tone) {
        const translations = {
            friendly: {
                japanese: text.replace(/Ï†ïÎßê/g, "Êú¨ÂΩì„Å´").replace(/ÏòàÏÅòÎÑ§Ïöî/g, "ÂèØÊÑõ„ÅÑ„Åß„Åô„Å≠").replace(/Ïñ¥ÎîîÏÑú/g, "„Å©„Åì„Åß").replace(/Íµ¨Îß§ÌïòÏÖ®ÎÇòÏöî/g, "Ë≥ºÂÖ•„Åï„Çå„Åæ„Åó„Åü„Åã") || "Êú¨ÂΩì„Å´Á¥†Êïµ„Åß„Åô„Å≠ÔºÅ",
                french: text.replace(/Ï†ïÎßê/g, "vraiment").replace(/ÏòàÏÅòÎÑ§Ïöî/g, "c'est joli").replace(/Ïñ¥ÎîîÏÑú/g, "o√π").replace(/Íµ¨Îß§ÌïòÏÖ®ÎÇòÏöî/g, "avez-vous achet√©") || "C'est vraiment joli !"
            },
            polite: {
                japanese: text.replace(/Ï†ïÎßê/g, "„Å®„Å¶„ÇÇ").replace(/ÏòàÏÅòÎÑ§Ïöî/g, "Áæé„Åó„ÅÑ„Åß„Åô„Å≠").replace(/Ïñ¥ÎîîÏÑú/g, "„Å©„Å°„Çâ„Åß").replace(/Íµ¨Îß§ÌïòÏÖ®ÎÇòÏöî/g, "„ÅäÊ±Ç„ÇÅ„Å´„Å™„Çä„Åæ„Åó„Åü„Åã") || "„Å®„Å¶„ÇÇÁæé„Åó„ÅÑ„Åß„Åô„Å≠„ÄÇ",
                french: text.replace(/Ï†ïÎßê/g, "tr√®s").replace(/ÏòàÏÅòÎÑ§Ïöî/g, "c'est tr√®s √©l√©gant").replace(/Ïñ¥ÎîîÏÑú/g, "o√π").replace(/Íµ¨Îß§ÌïòÏÖ®ÎÇòÏöî/g, "avez-vous acquis") || "C'est tr√®s √©l√©gant."
            },
            casual: {
                japanese: text.replace(/Ï†ïÎßê/g, "„Éû„Ç∏„Åß").replace(/ÏòàÏÅòÎÑ§Ïöî/g, "ÂèØÊÑõ„ÅÑÔºÅ").replace(/Ïñ¥ÎîîÏÑú/g, "„Å©„Åì„Åß").replace(/Íµ¨Îß§ÌïòÏÖ®ÎÇòÏöî/g, "Ë≤∑„Å£„Åü„ÅÆÔºü") || "„Éû„Ç∏„ÅßÂèØÊÑõ„ÅÑÔºÅ",
                french: text.replace(/Ï†ïÎßê/g, "super").replace(/ÏòàÏÅòÎÑ§Ïöî/g, "c'est mignon").replace(/Ïñ¥ÎîîÏÑú/g, "o√π").replace(/Íµ¨Îß§ÌïòÏÖ®ÎÇòÏöî/g, "tu l'as achet√© o√π") || "C'est super mignon !"
            }
        };
        
        return translations[tone] || translations.friendly;
    }
};
